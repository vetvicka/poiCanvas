// Generated by CoffeeScript 1.3.3
(function() {
  var animate, calcX, calcY, degToRad, drawPoi;

  $(function() {
    var x, y;
    window.context = document.getElementById("canvasArea").getContext("2d");
    window.canvas = document.getElementById("canvasArea");
    window.canvas.width = window.innerWidth - 350;
    window.canvas.height = window.innerHeight - 8;
    window.armLen = 50;
    window.poiLen = 50;
    window.poiABeats = -3;
    window.poiBBeats = -3;
    window.armBDirection = false;
    window.armADirection = false;
    window.showHands = true;
    x = Math.round(window.canvas.width / 2);
    y = Math.round(window.canvas.height / 2);
    return window.canvasData = {
      x: x,
      y: y,
      pos: 0,
      speed: 1
    };
  });

  $(function() {
    return $(window).resize(function() {
      window.canvas.width = window.innerWidth - 200;
      window.canvas.height = window.innerHeight - 8;
      window.canvasData.x = Math.round(window.canvas.width / 2);
      return window.canvasData.y = Math.round(window.canvas.height / 2);
    });
  });

  degToRad = function(deg) {
    return deg * 2 * Math.PI / 360;
  };

  $(function() {
    return setInterval(animate, 17);
  });

  calcX = function(origin, deg, poi) {
    return origin + poi.armLen * Math.sin(poi.shift + degToRad(deg)) + poi.poiLen * Math.sin(poi.beats * (degToRad(deg)));
  };

  calcY = function(origin, deg, poi) {
    return origin + poi.armLen * Math.cos(poi.shift + degToRad(deg)) + poi.poiLen * Math.cos(poi.beats * (degToRad(deg)));
  };

  drawPoi = function(poi) {
    var breaker, ctx, i, linePos, x, x0, y, y0, _i, _j, _ref, _ref1;
    x0 = window.canvasData.x;
    y0 = window.canvasData.y;
    ctx = window.context;
    if (window.showHands === true) {
      ctx.beginPath();
      x = window.canvasData.x;
      y = window.canvasData.y;
      ctx.arc(x, y, poi.armLen, 0, Math.PI * 2);
      ctx.lineWidth = 0.5;
      ctx.strokeStyle = "#cacaca";
      ctx.stroke();
    }
    if (poi.showPath === true) {
      ctx.beginPath();
      ctx.lineWidth = 0.5;
      for (i = _i = 0; _i <= 360; i = ++_i) {
        x = calcX(x0, i, poi);
        y = calcY(y0, i, poi);
        ctx.lineTo(x, y);
        ctx.strokeStyle = poi.poiColor;
      }
      ctx.stroke();
    }
    if (window.showHands === true) {
      ctx.beginPath();
      x = x0 + poi.armLen * Math.sin(poi.shift + degToRad(poi.fromDeg));
      y = y0 + poi.armLen * Math.cos(poi.shift + degToRad(poi.fromDeg));
      ctx.arc(x, y, 7, 0, Math.PI * 2);
      ctx.fillStyle = "brown";
      ctx.fill();
      ctx.beginPath();
      ctx.moveTo(x, y);
      x = calcX(x0, poi.fromDeg, poi);
      y = calcY(y0, poi.fromDeg, poi);
      ctx.lineTo(x, y);
      ctx.stroke();
    }
    x = calcX(x0, poi.fromDeg, poi);
    y = calcY(y0, poi.fromDeg, poi);
    ctx.beginPath();
    ctx.arc(x, y, 7, 0, Math.PI * 2);
    ctx.fillStyle = poi.poiColor;
    ctx.fill();
    linePos = 91;
    breaker = 0;
    ctx.beginPath();
    for (i = _j = _ref = poi.fromDeg, _ref1 = poi.toDeg; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = _ref <= _ref1 ? ++_j : --_j) {
      x = calcX(x0, i, poi);
      y = calcY(y0, i, poi);
      ctx.lineTo(x, y);
      ctx.strokeStyle = poi.poiColor;
      ctx.lineWidth = 10 * (linePos-- / 90);
      if (breaker % 4 === 0) {
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(x, y);
      }
      breaker += 1;
    }
    return ctx.stroke();
  };

  animate = function() {
    var ctx, oldPos, poiA, poiB, pos, x0, y0;
    x0 = 500;
    y0 = 500;
    ctx = window.context;
    ctx.clearRect(0, 0, window.canvas.width, window.canvas.height);
    pos = window.canvasData.pos;
    poiA = {
      fromDeg: pos + 90,
      toDeg: pos,
      poiColor: "Red",
      beats: window.poiABeats,
      showPath: true,
      shift: 0,
      showHand: true,
      armLen: window.canvas.height / 4 * (window.armLen / 100),
      poiLen: window.canvas.height / 4 * (window.poiLen / 100)
    };
    poiB = {
      fromDeg: pos + 90 + 180,
      toDeg: pos + 180,
      poiColor: "Green",
      beats: window.poiBBeats,
      showPath: true,
      shift: 0,
      showHand: true,
      armLen: window.canvas.height / 4 * (window.armLen / 100),
      poiLen: window.canvas.height / 4 * (window.poiLen / 100)
    };
    if (window.armADirection) {
      poiA.fromDeg = 360 - pos;
      poiA.toDeg = 360 - pos + 90;
    }
    if (window.armBDirection) {
      poiB.fromDeg = 360 - pos + 180;
      poiB.toDeg = 360 - pos + 90 + 180;
    }
    drawPoi(poiA);
    drawPoi(poiB);
    oldPos = window.canvasData.pos;
    return window.canvasData.pos = (pos + window.canvasData.speed) % 360;
  };

}).call(this);
